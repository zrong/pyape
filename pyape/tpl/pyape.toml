#==============================================
# pyape 的主配置文件
#
# 使用 {} 包含的变量名称会被替换成具体的值
#
# {NAME} 项目名称，定义在配置文件中
# {WORK_DIR} 项目源码所在文件夹的绝对路径
# {DEPLOY_DIR} 部署在服务器上的文件夹
#
# 以下 {} 变量被环境变量替换
# 若值中包含下面的键，则会被替换成环境变量中的值
# 例如：
# 1. 项目 name 为 pyape（默认值），项目 name 作为环境变量替换时，会被转换为全大写
# 2. 环境变量中包含 PYAPE_LOCAL_ADMIN_NAME
# 3. 使用 --env local 生成配置文件时，将替换 {ADMIN_NAME} 的值为环境变量中的 PYAPE_LOCAL_ADMIN_NAME
# 
# {ADMIN_NAME} 管理员帐号
# {ADMIN_PASSWORD} 管理员密码
# {SECRET_KEY} flask 框架加密帅扫
# {SQLALCHEMY_DATABASE_URI} sqlalchemy 定义数据访问
#==============================================

# pyape 项目的名称
name = 'pyape'

# python 运行时路径，可使用绝对路径
pye = 'python3'

# 部署在服务器上的文件夹
deploy_dir = '/srv/app/{NAME}'


# 用于 fab deploy 上传时排除本地文件
rsync_exclude = [
    '.DS_Store', '*.pyc', 'fab*', '__pycache__', '.pytest_cache',
    '.vscode', '*.code-workspace', '*.swp', '*.iml', 
    '.git', '.pyenv', 'venv', '.gitignore', 
    'wiki', 'output', 'tests', 'logs', 'wechat_sdk', 'flask_sqlalchemy',
    '*.jinja2', '*.dot', '*.json', '*.toml',
    'config.*', 'uwsgi.*', '*.service', 'gunicorn.*'
]

# 若使用 supervisord 管理进程，使用下面的配置生成 supervisord.conf
['supervisord.conf']
run_dir = '/var/run'
log_dir = '/var/log'
include_files = '/etc/supervisor/conf.d/*.conf'
directory = '/tmp'
user = 'root'

# 若要将 supervisord 使用 systemd 管理，使用下面的配置生成 supervisord.service
['supervisord.service']
exed = '/usr/local/bin/supervisord'
exed_conf = '/etc/supervisor/supervisord.conf'
exectl = '/usr/local/bin/supervisorctl'

# 使用下面的配置生成 supervisord 的 program 配置文件
['supervisor_program.conf']
priority = 999
# Supervisor program 名称
name = 'pyape'
# Supervisor program 的运行用户
user = 'app'
# Supervisor 启动的 flask 进程之 app_module
app_module = 'wsgi:pyape_app'
cwd = '{DEPLOY_DIR}'

# .env 基本配置文件内容，保存 FLASK 运行需要的配置，以及 flask.config 中的配置
['.env']
FLASK_APP = 'wsgi:pyape_app'
FLASK_ENV = 'production'
FLASK_RUN_PORT = 5000


# gunicorn.conf.py 的基本配置文件内容，可在 env 中进行覆盖
['gunicorn.conf.py']
wsgi_app = 'wsgi:pyape_app'
proc_name = 'sagi-oidc'
bind = '127.0.0.1:5001'
umask = 0
daemon = true
capture_output = true


# uwsgi.ini 基本配置文件内容
['uwsgi.ini']
processes = 2
threads = 1
venv = '%dvenv'
# 是否切换到后台，本地调试的时候可以设为 False，直接查看控制台输出
daemonize = true
# socket 和 http 参数二选一，如果同时选择，以 socket 参数为准
# 端口转发可能引发 nginx 499 问题（推测是端口转发 limit 没有打开） 
# 改为使用 sock 文件 （同样需要打开 limit 限制）
socket = '%d%n.sock'
# http_socket = '127.0.0.1:5002'
# http = '127.0.0.1:5002'
# Stat Server
stats = '%d%nstats.sock'


# flask 框架的配置
[FLASK]
# 用于 FLASK 内部加密
SECRET_KEY = '{SECRET_KEY}'

# 数据库地址，多数据库配置参见 [FLASK.SQLALCHEMY_BINDS] {workdir} 被替换为 pyape 运行文件夹的绝对路径
SQLALCHEMY_DATABASE_URI = 'sqlite:///{PYAPE_WORKDIR}/pyape.sqlite'

# REDIS 地址，多 REDIS 配置参见 [FLASK.REDIS_BINDS]
# REDIS_URI = 'redis://localhost:6379/0'

[FLASK.SQLALCHEMY_BINDS]
# SQLALCHEMY 使用 bind_key_db
# test1000 = 'mysql+pymysql://test:123456@127.0.0.1/test1000'
# test2000 = 'mysql+pymysql://test:123456@127.0.0.1/test2000'

[FLASK.REDIS_BINDS]
# REDIS 使用 bind_key_redis，REDIS_URI 的 bind_key_redis 为 None
# 对 REDIS 的使用遵循了最大利用率+最大灵活性原则，可能出现：
# 1. 单个 Regional 使用单个 REDIS 实例（少量情况）
# 2. 多个 Regional 使用同一个 REDIS 实例，分 DB 存储（多数情况）
# 3. 多个 Regional 使用同一个 REDIS 实例和同一个 DB（测试情况）
# 4. 单个 Regional 使用多个 REDIS 实例（暂未如此部署）
# db0 = 'redis://localhost:6379/0'
# db1 = 'redis://localhost:6379/1'

# 用于信任的 MJST TOKEN，处于这个列表中的 MJST 不会因为过期被拒绝。
PYAPE.TRUSTED_TOKENS = []

# 配置系统使用的根帐号和密码
# [PYAPE.ADMIN]
# name = '{ADMIN_NAME}'
# password = '{ADMIN_PASSWORD}'

# pyzog 是远程 logger 接收器： https://github.com/zrong/pyzog
[PYAPE.LOGGER.pyzog]
# 若不配置使用 pyzog，将这个表留空
# type = 'redis/zmq'
# target = 'redis://:123456@127.0.0.1:6379/0'

[PYAPE.PATH]
STATIC_URL_PATH = '/pyapeapi'
#STATIC_FOLDER = 'dist'

[PYAPE.PATH.modules]
cf = '/pyapeapi/cf'

#==============================================
# 以下配置覆盖上面的配置
# 覆盖以「增补」的形式进行，同名的键会被覆盖，不同名称的键保留
#
# ENV 代表环境，使用 fabric 部署的时候，可以使用这些不同的环境
# 以生成不同环境下的配置文件，ENV 后的键名为环境名称
# 例如 「ENV.local.'.env'] 用于替换 local 环境下的 .env 文件
#==============================================

#--------------------- local 环境的配置
[ENV.local.'.env']
FLASK_ENV = 'development'
FLASK_RUN_PORT = 5001

[ENV.local.'uwsgi.ini']
socket = '127.0.0.1:5000'
daemonize = false

[ENV.local.PYAPE.PATH]
STATIC_URL_PATH = '/static'
STATIC_FOLDER = 'dist'

[ENV.local.PYAPE.PATH.modules]
cf = '/cf'

[[ENV.local.PYAPE.REGIONALS]]
name = '测试服1000'
index = 1
# 服务端依赖其作为校验，与 regional 的值相同
r = 1000

[[ENV.local.PYAPE.REGIONALS]]
name = '测试服2000'
index = 2
# 服务端依赖其作为校验，与 regional 的值相同
r = 2000


#--------------------- prod 环境的配置
# 不要携程 EVN.prod.deploy_dir = .... 解析器的 bug 会导致这种写法增加到 [[ENV.local.PYAPE.REGIONALS]] 内部
[ENV.prod]
deploy_dir = '/srv/app/{NAME}_prod'

[ENV.prod.'uwsgi.ini']
processes = 4

[ENV.prod.FLASK]
SQLALCHEMY_DATABASE_URI = '{SQLALCHEMY_DATABASE_URI}'